# Caches information about open FDs, freqently accessed files.
# Changing this setting, in my environment, brought performance up from 560k req/sec, to 904k req/sec.
# I recommend using some varient of these options, though not the specific values listed below.
open_file_cache max=20000 inactive=200s;
open_file_cache_valid 300s;
open_file_cache_min_uses 5;
open_file_cache_errors on;






proxy_cache_path /tmp/proxy-cache levels=1:2 keys_zone=microcache:20m max_size=256m inactive=2h;
proxy_cache_path /tmp/proxy-cache2 levels=1:2 keys_zone=microcache2:20m max_size=256m inactive=2h;
proxy_cache_use_stale updating error timeout invalid_header http_500;
proxy_cache_lock on;
proxy_cache_key $scheme$host$request_uri$request_method;

  # Setup the fastcgi cache.
  fastcgi_cache_path /tmp/cgi-cache levels=1:2 keys_zone=fcgimicrocache:20m max_size=2048m inactive=12h;
  fastcgi_cache_path /tmp/cgi-cache2 levels=1:2 keys_zone=fcgimicrocache2:20m max_size=256m inactive=2h;
  fastcgi_cache_use_stale updating error timeout invalid_header http_500;
  fastcgi_cache_lock on;
  fastcgi_cache_key $scheme$host$request_uri$request_method;


  ## set cache log location, so you can evaluate hits
  log_format cache  '$time_local-$http_x_forwarded_for-$remote_addr - "$request" - $remote_user "$request" - "$http_user_agent" $status $upstream_cache_status $body_bytes_sent "$http_referer"';

  ## Set a cache_uid variable for authenticated users.
  map $http_cookie $cache_uid {
    default nil;
    ~SESS[[:alnum:]]+=(?<session_id>[[:alnum:]]+) $session_id;
  }

  ## mapping cache to request method
  map $request_method $no_cache {
    default 1; # by default do not cache
    HEAD 0; # cache HEAD requests
    GET 0; # cache GET requests
  }

gzip off;

#include /etc/nginx/gzip_params;

client_max_body_size 64M;
client_body_buffer_size 8M;

#include naxsi/naxsi_core.rules;

server {
  server_name eldigitalab.dev.oondeo.es;
  listen 80;
  access_log /var/log/nginx/access.log main;
  location / {
    #allow 185.41.244.235;
    #deny all;
    proxy_pass http://127.0.0.1:8080;
    
    proxy_set_header Host "www.eldigitaldealbacete.com";  
    proxy_set_header Accept-Encoding "";
    #proxy_set_header X-Real-IP               $http_x_forwarded_for;
          #proxy_set_header REMOTE_ADDR $http_x_forwarded_for;
    proxy_set_header        X-Forwarded-Host  "www.eldigitaldealbacete.com";
    
    proxy_redirect                  http://www.eldigitaldealbacete.com/ /;
    proxy_redirect                  http://www.eldigitaldealbacete.com:8080/ /;
  

    proxy_cookie_domain             'www.eldigitaldealbacete.com' 'eldigitalab.dev.oondeo.es';
      sub_filter_once off;
            sub_filter_types *;                                                         
            sub_filter "www.eldigitaldealbacete.com" "eldigitalab.dev.oondeo.es" ;
        
  
   # replace request
   access_by_lua_block{

if ngx.req.get_method() == "POST" then   
    ngx.req.read_body()
    local data = ngx.req.get_body_data() 
    if data then
      local newargs, n, err = ngx.re.gsub(data, "eldigitalab.dev.oondeo.es", "www.eldigitaldealbacete.com") 
      ngx.req.set_body_data(newargs)
    end
    local file = ngx.req.get_body_file()
    if file then                                                                                         
      local newargs, n, err = ngx.re.gsub(file, "eldigitalab.dev.oondeo.es", "www.eldigitaldealbacete.com")
      ngx.req.set_body_data(newargs)
    end 
else
  local args = ngx.req.get_uri_args()
  local newargs = {}
  for key, val in pairs(args) do
    if type(val) == "string" then
      local newval, n , err =  ngx.re.gsub(val, "eldigitalab.dev.oondeo.es", "www.eldigitaldealbacete.com")
      newargs[key]=newval
    else
      newargs[key]=val
    end
  end
        ngx.req.set_uri_args(newargs)
end

    }
#   #rewrite reponse
#     body_filter_by_lua_block{
#local resp_body = string.sub(ngx.arg[1], 1, 1000)  -- arg[1] contains a chunk of response content
#ngx.ctx.buffered = string.sub((ngx.ctx.buffered or "") .. resp_body, 1, 1000)
#if ngx.arg[2] and ngx.req.get_method() == "POST" then  -- arg[2] is true if this is the last chunk
#  ngx.log(ngx.STDERR,ngx.ctx.buffered)
#end  
#   }
  }

}

server {
    server_name _;
    listen 127.0.0.1:8080 default_server;
    access_log /var/log/nginx/access.log main;

    
    #access_log off;
    include server_cache_params;

    # this prevents hidden files (beginning with a period) from being served
    location ~ /\.          { access_log off; log_not_found off; deny all; }

    include restrictions.conf;                                                                                                         
    include wordpress-seo-plugin-support.conf; 

        # POST requests and urls with a query string should always go to PHP                                                                                    
        if ($request_method = POST) {                                                                  
                set $no_cache 1;                                                                                                                                
        }                                                                                                                                                       
        if ($query_string != "") {                                                                     
                set $no_cache 1;                                                                                                                                
        }                                                                                                                                                       
                                                                                                       
        # Don't cache uris containing the following segments                                                                                                    
        if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml") {                                                         
                set $no_cache 1;                                                                       
        }                                                                                                                                                       
                                                                                                                                                                
        # Don't use the cache for logged in users or recent commenters                                 
        if ($http_cookie ~* "comment_author|wp-postpass|wordpress_no_cache|wordpress_logged_in") {                                                              
                set $no_cache 1;                                                                                                                                
        }                                                                                              
        
     root /var/www/html;
     index index.html index.htm index.php;
	
        location / {
	        #allow 185.41.244.235;
                #deny all;

	    try_files $uri $uri/ /index.html /index.php$is_args$args;
       
        }

	error_page 404 /404.html;	
	error_page 500 502 503 504 /404.html;
        location ~* .(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
                expires max;
                log_not_found off;
                access_log off;
		aio threads=default;
        }
        location = /robots.txt {
                access_log off;
                log_not_found off;
        }
        location = /favicon.ico {
          expires max;
          log_not_found off;
          access_log off;
        }

        location ~ \.(hh|php)$ {

            try_files $uri =404;
      ## Naxsi rules
      #LearningMode;
      #SecRulesEnabled;
      #SecRulesDisabled;
      #DeniedUrl "/RequestDenied";

      ## check rules
      #CheckRule "$SQL >= 10" BLOCK;
      #CheckRule "$RFI >= 8" BLOCK;
      #CheckRule "$TRAVERSAL >= 4" BLOCK;
      #CheckRule "$EVADE >= 4" BLOCK;
      #CheckRule "$XSS >= 8" BLOCK;
      #include naxsi/rules/wordpress.rules;

# Drop no cache cookie if need be
# (for some reason, add_header fails if included in prior if-block)
if ($no_cache = "1") {
    add_header Set-Cookie "_mcnc=1; Max-Age=2; Path=/";
    add_header X-Microcachable "0";
}
# Bypass cache if no-cache cookie is set
#if ($http_cookie ~* "_mcnc") {
#            set $no_cache "1";
#}


# Bypass cache if flag is set
fastcgi_no_cache $no_cache;
fastcgi_cache_bypass $no_cache;
fastcgi_cache fcgimicrocache;
fastcgi_cache_valid 404 30m;
fastcgi_cache_valid 200 5m;
fastcgi_max_temp_file_size 1M;

	    add_header X-Fastcgi-Cache $upstream_cache_status;
            fastcgi_pass_header Set-Cookie;
            fastcgi_pass_header Cookie;
	    fastcgi_pass_header 'Accept-Encoding ""';
            fastcgi_ignore_headers Cache-Control Expires Set-Cookie;
	    
	    #fastcgi_param 'HTTP_X_FORWARDED_HOST "www.eldigitaldealbacete.com'";
	    
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            #fastcgi_param  HTTPS $fe_https;
	
            include fastcgi_params;
	    fastcgi_buffer_size 4K;
            fastcgi_buffers 64 4k;
	
            fastcgi_pass 127.0.0.1:9000;
	    #fastcgi_pass  unix:/var/run/php-fpm.sock;
         	
        }
    

}
server {
    listen       80 default_server;
    server_name  _;
    return       301 http://www.eldigitalab.dev.oondeo.es$request_uri;
}
