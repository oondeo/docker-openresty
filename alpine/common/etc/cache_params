# Caches information about open FDs, freqently accessed files.
# Changing this setting, in my environment, brought performance up from 560k req/sec, to 904k req/sec.
# I recommend using some varient of these options, though not the specific values listed below.
open_file_cache max=20000 inactive=200s;
open_file_cache_valid 300s;
open_file_cache_min_uses 5;
open_file_cache_errors on;






proxy_cache_path /tmp/proxy-cache levels=1:2 keys_zone=proxycache:20m max_size=256m inactive=2h;
proxy_cache_path /tmp/proxy-cache2 levels=1:2 keys_zone=proxycache2:20m max_size=256m inactive=2h;
proxy_cache_use_stale updating error timeout invalid_header http_500;
proxy_cache_lock on;
proxy_cache_key $request_method$scheme$host$request_uri;

  # Setup the fastcgi cache.
  fastcgi_cache_path /tmp/cgi-cache levels=1:2 keys_zone=microcache:20m max_size=256m inactive=2h;
  fastcgi_cache_path /tmp/cgi-cache2 levels=1:2 keys_zone=microcache2:20m max_size=256m inactive=2h;
  # If an error occurs when communicating with FastCGI server, return cached content.
  # Useful for serving cached content if the PHP process dies or timeouts.
  fastcgi_cache_use_stale updating error timeout invalid_header http_500;
  
  fastcgi_cache_lock on;
  fastcgi_cache_lock_timeout 6s;
  fastcgi_cache_key $request_method$scheme$host$request_uri;


  ## set cache log location, so you can evaluate hits
  log_format cache  '$time_local-$http_x_forwarded_for-$remote_addr - "$request" - $remote_user "$request" - "$http_user_agent" $status $upstream_cache_status $body_bytes_sent "$http_referer"';

  ## Set a cache_uid variable for authenticated users.
  map $http_cookie $cache_uid {
    default nil;
    ~SESS[[:alnum:]]+=(?<session_id>[[:alnum:]]+) $session_id;
  }

  ## mapping cache to request method
  map $request_method $no_cache {
    default "1"; # by default do not cache
    HEAD "0"; # cache HEAD requests
    GET "0"; # cache GET requests
  }
